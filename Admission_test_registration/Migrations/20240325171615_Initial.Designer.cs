// <auto-generated />
using System;
using Admission_test_registration.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Admission_test_registration.Migrations
{
    [DbContext(typeof(ExamDBContext))]
    [Migration("20240325171615_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Admission_test_registration.Models.Certificate", b =>
                {
                    b.Property<int>("CertificateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CertificateId"));

                    b.Property<bool>("CompetitionActivity")
                        .HasColumnType("bit");

                    b.Property<int>("EducatorId")
                        .HasColumnType("int");

                    b.Property<int>("EnglishGrade")
                        .HasColumnType("int");

                    b.Property<int>("HistoryGrade")
                        .HasColumnType("int");

                    b.Property<int>("MathGrade")
                        .HasColumnType("int");

                    b.Property<DateOnly>("ReceiveDate")
                        .HasColumnType("date");

                    b.Property<bool>("SocialActivity")
                        .HasColumnType("bit");

                    b.Property<bool>("SportActivity")
                        .HasColumnType("bit");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("CertificateId");

                    b.HasIndex("EducatorId");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("Admission_test_registration.Models.Educator", b =>
                {
                    b.Property<int>("EducatorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EducatorId"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<int>("Degree")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<string>("telNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EducatorId");

                    b.ToTable("Educators");
                });

            modelBuilder.Entity("Admission_test_registration.Models.ExamScheduleElement", b =>
                {
                    b.Property<int>("ExamScheduleElementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamScheduleElementId"));

                    b.Property<DateTime>("ExamTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UniversityId")
                        .HasColumnType("int");

                    b.HasKey("ExamScheduleElementId");

                    b.HasIndex("UniversityId");

                    b.ToTable("ExamScheduleElements");
                });

            modelBuilder.Entity("Admission_test_registration.Models.RegistrationSheet", b =>
                {
                    b.Property<int>("RegistrationSheetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RegistrationSheetId"));

                    b.Property<int>("ExamScheduleElementId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("RegistrationSheetId");

                    b.HasIndex("ExamScheduleElementId");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("RegistrationSheets");
                });

            modelBuilder.Entity("Admission_test_registration.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<string>("telNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Admission_test_registration.Models.University", b =>
                {
                    b.Property<int>("UniversityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UniversityId"));

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UniversityId");

                    b.ToTable("Universities");
                });

            modelBuilder.Entity("Admission_test_registration.Models.Certificate", b =>
                {
                    b.HasOne("Admission_test_registration.Models.Educator", "Educator")
                        .WithMany("CertificateList")
                        .HasForeignKey("EducatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Admission_test_registration.Models.Student", "Student")
                        .WithOne("Certificate")
                        .HasForeignKey("Admission_test_registration.Models.Certificate", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Educator");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Admission_test_registration.Models.ExamScheduleElement", b =>
                {
                    b.HasOne("Admission_test_registration.Models.University", "University")
                        .WithMany("ExamScheduleElements")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("University");
                });

            modelBuilder.Entity("Admission_test_registration.Models.RegistrationSheet", b =>
                {
                    b.HasOne("Admission_test_registration.Models.ExamScheduleElement", "ExamScheduleElement")
                        .WithMany("RegistrationSheets")
                        .HasForeignKey("ExamScheduleElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Admission_test_registration.Models.Student", "Student")
                        .WithOne("RegistrationSheet")
                        .HasForeignKey("Admission_test_registration.Models.RegistrationSheet", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamScheduleElement");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Admission_test_registration.Models.Educator", b =>
                {
                    b.Navigation("CertificateList");
                });

            modelBuilder.Entity("Admission_test_registration.Models.ExamScheduleElement", b =>
                {
                    b.Navigation("RegistrationSheets");
                });

            modelBuilder.Entity("Admission_test_registration.Models.Student", b =>
                {
                    b.Navigation("Certificate");

                    b.Navigation("RegistrationSheet");
                });

            modelBuilder.Entity("Admission_test_registration.Models.University", b =>
                {
                    b.Navigation("ExamScheduleElements");
                });
#pragma warning restore 612, 618
        }
    }
}
